{"filter":false,"title":"template.yaml","tooltip":"/order-app/template.yaml","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":86,"column":52},"end":{"row":86,"column":53},"action":"insert","lines":["y"],"id":84},{"start":{"row":86,"column":53},"end":{"row":86,"column":54},"action":"insert","lines":["n"]},{"start":{"row":86,"column":54},"end":{"row":86,"column":55},"action":"insert","lines":["c"]}],[{"start":{"row":251,"column":33},"end":{"row":252,"column":0},"action":"insert","lines":["",""],"id":85},{"start":{"row":252,"column":0},"end":{"row":252,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":252,"column":0},"end":{"row":252,"column":2},"action":"remove","lines":["  "],"id":86}],[{"start":{"row":252,"column":2},"end":{"row":255,"column":0},"action":"insert","lines":["  PostOrders:","    Description: \"PostOrders Lambda Function ARN\"","    Value: !GetAtt PostOrders.Arn",""],"id":87}],[{"start":{"row":252,"column":0},"end":{"row":252,"column":2},"action":"remove","lines":["  "],"id":88},{"start":{"row":253,"column":0},"end":{"row":253,"column":2},"action":"remove","lines":["  "]},{"start":{"row":254,"column":0},"end":{"row":254,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":253,"column":0},"end":{"row":253,"column":2},"action":"insert","lines":["  "],"id":89},{"start":{"row":254,"column":0},"end":{"row":254,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":254,"column":33},"end":{"row":255,"column":0},"action":"remove","lines":["",""],"id":90}],[{"start":{"row":253,"column":28},"end":{"row":253,"column":29},"action":"insert","lines":["S"],"id":91},{"start":{"row":253,"column":29},"end":{"row":253,"column":30},"action":"insert","lines":["y"]},{"start":{"row":253,"column":30},"end":{"row":253,"column":31},"action":"insert","lines":["n"]}],[{"start":{"row":253,"column":18},"end":{"row":253,"column":31},"action":"remove","lines":["PostOrdersSyn"],"id":92},{"start":{"row":253,"column":18},"end":{"row":253,"column":32},"action":"insert","lines":["PostOrdersSync"]}],[{"start":{"row":254,"column":19},"end":{"row":254,"column":29},"action":"remove","lines":["PostOrders"],"id":93},{"start":{"row":254,"column":19},"end":{"row":254,"column":33},"action":"insert","lines":["PostOrdersSync"]}],[{"start":{"row":220,"column":36},"end":{"row":221,"column":0},"action":"insert","lines":["",""],"id":95},{"start":{"row":221,"column":0},"end":{"row":221,"column":12},"action":"insert","lines":["            "]},{"start":{"row":221,"column":12},"end":{"row":221,"column":13},"action":"insert","lines":["-"]}],[{"start":{"row":221,"column":12},"end":{"row":221,"column":13},"action":"remove","lines":["-"],"id":97},{"start":{"row":221,"column":12},"end":{"row":222,"column":0},"action":"insert","lines":["            - !GetAtt PostOrders.Arn",""]}],[{"start":{"row":221,"column":0},"end":{"row":221,"column":2},"action":"remove","lines":["  "],"id":98}],[{"start":{"row":221,"column":0},"end":{"row":221,"column":2},"action":"remove","lines":["  "],"id":99}],[{"start":{"row":221,"column":0},"end":{"row":221,"column":2},"action":"remove","lines":["  "],"id":100}],[{"start":{"row":221,"column":0},"end":{"row":221,"column":2},"action":"remove","lines":["  "],"id":101}],[{"start":{"row":221,"column":0},"end":{"row":221,"column":2},"action":"remove","lines":["  "],"id":102}],[{"start":{"row":221,"column":0},"end":{"row":221,"column":2},"action":"remove","lines":["  "],"id":103}],[{"start":{"row":221,"column":36},"end":{"row":222,"column":0},"action":"remove","lines":["",""],"id":104}],[{"start":{"row":221,"column":32},"end":{"row":221,"column":33},"action":"insert","lines":["S"],"id":105},{"start":{"row":221,"column":33},"end":{"row":221,"column":34},"action":"insert","lines":["y"]}],[{"start":{"row":221,"column":22},"end":{"row":221,"column":34},"action":"remove","lines":["PostOrdersSy"],"id":106},{"start":{"row":221,"column":22},"end":{"row":221,"column":36},"action":"insert","lines":["PostOrdersSync"]}],[{"start":{"row":54,"column":0},"end":{"row":82,"column":21},"action":"remove","lines":["  PostOrders:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Events:","        SQSEventSource:","          Type: SQS","          Properties:","            Queue: !GetAtt OrderQueue.Arn","            BatchSize: 10","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:PutItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"  "],"id":107},{"start":{"row":54,"column":0},"end":{"row":83,"column":0},"action":"insert","lines":["  PostOrders:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Events:","        SQSEventSource:","          Type: SQS","          Properties:","            Queue: !GetAtt OrderQueue.Arn","            BatchSize: 10","      Environment:","        Variables:","          STATE_MACHINE_ARN: !Ref OrderManagementSFN","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"    ","          - Effect: Allow","            Action:","              - states:StartExecution","            Resource:","              - !Sub ","                - '${StateMachine}'","                - { StateMachine: !Ref OrderManagementSFN }",""]}],[{"start":{"row":82,"column":59},"end":{"row":83,"column":0},"action":"remove","lines":["",""],"id":108}],[{"start":{"row":237,"column":25},"end":{"row":238,"column":0},"action":"insert","lines":["",""],"id":109},{"start":{"row":238,"column":0},"end":{"row":238,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":238,"column":0},"end":{"row":238,"column":4},"action":"remove","lines":["    "],"id":110},{"start":{"row":238,"column":0},"end":{"row":243,"column":25},"action":"insert","lines":["  ProcessPaymentFumction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/process-payment/","      Handler: app.processPayment","      Runtime: nodejs14.x"]}],[{"start":{"row":237,"column":25},"end":{"row":238,"column":0},"action":"insert","lines":["",""],"id":111},{"start":{"row":238,"column":0},"end":{"row":238,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":238,"column":0},"end":{"row":238,"column":4},"action":"remove","lines":["    "],"id":112},{"start":{"row":237,"column":25},"end":{"row":238,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":237,"column":25},"end":{"row":238,"column":0},"action":"insert","lines":["",""],"id":113},{"start":{"row":238,"column":0},"end":{"row":238,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":238,"column":0},"end":{"row":238,"column":4},"action":"remove","lines":["    "],"id":114}],[{"start":{"row":244,"column":25},"end":{"row":245,"column":0},"action":"insert","lines":["",""],"id":115},{"start":{"row":245,"column":0},"end":{"row":245,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":245,"column":0},"end":{"row":245,"column":6},"action":"remove","lines":["      "],"id":116},{"start":{"row":245,"column":0},"end":{"row":251,"column":0},"action":"insert","lines":["SendOrderToRestaurantFunction:","  Type: AWS::Serverless::Function","  Properties:","    CodeUri: src/order-management/functions/sendordertorestaurant/","    Handler: app.sendOrderToRestaurant","    Runtime: nodejs14.x",""]}],[{"start":{"row":244,"column":25},"end":{"row":245,"column":0},"action":"insert","lines":["",""],"id":117},{"start":{"row":245,"column":0},"end":{"row":245,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":245,"column":0},"end":{"row":245,"column":6},"action":"remove","lines":["      "],"id":118}],[{"start":{"row":252,"column":0},"end":{"row":253,"column":0},"action":"insert","lines":["",""],"id":119}],[{"start":{"row":253,"column":0},"end":{"row":294,"column":0},"action":"insert","lines":[" ManageStateFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/managestate/","      Handler: app.manageState","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","          SNS_TOPIC_ARN: !Ref OrderTopic","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","              - dynamodb:Query ","              - dynamodb:Scan","              - dynamodb:PutItem","              - dynamodb:UpdateItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"    ","          - Effect: Allow","            Action:","              - SNS:Publish","            Resource:","              - \"*\"    ","  ","  OrderTopic:","    Type: AWS::SNS::Topic","    Properties: ","      Subscription: ","        - Endpoint: \"<YOUR-EMAIL-ADDRESS(i.e.test@gmail.com)>\"","          Protocol: \"email\"","      TopicName: \"order-topic\"",""],"id":120}],[{"start":{"row":291,"column":21},"end":{"row":291,"column":61},"action":"remove","lines":["<YOUR-EMAIL-ADDRESS(i.e.test@gmail.com)>"],"id":121},{"start":{"row":291,"column":21},"end":{"row":291,"column":22},"action":"insert","lines":["M"]},{"start":{"row":291,"column":22},"end":{"row":291,"column":23},"action":"insert","lines":["O"]}],[{"start":{"row":291,"column":22},"end":{"row":291,"column":23},"action":"remove","lines":["O"],"id":122},{"start":{"row":291,"column":21},"end":{"row":291,"column":22},"action":"remove","lines":["M"]}],[{"start":{"row":291,"column":21},"end":{"row":291,"column":22},"action":"insert","lines":["m"],"id":123},{"start":{"row":291,"column":22},"end":{"row":291,"column":23},"action":"insert","lines":["o"]},{"start":{"row":291,"column":23},"end":{"row":291,"column":24},"action":"insert","lines":["h"]},{"start":{"row":291,"column":24},"end":{"row":291,"column":25},"action":"insert","lines":["a"]},{"start":{"row":291,"column":25},"end":{"row":291,"column":26},"action":"insert","lines":["m"]},{"start":{"row":291,"column":26},"end":{"row":291,"column":27},"action":"insert","lines":["m"]},{"start":{"row":291,"column":27},"end":{"row":291,"column":28},"action":"insert","lines":["e"]},{"start":{"row":291,"column":28},"end":{"row":291,"column":29},"action":"insert","lines":["d"]},{"start":{"row":291,"column":29},"end":{"row":291,"column":30},"action":"insert","lines":["a"]}],[{"start":{"row":291,"column":30},"end":{"row":291,"column":31},"action":"insert","lines":["b"],"id":124},{"start":{"row":291,"column":31},"end":{"row":291,"column":32},"action":"insert","lines":["u"]},{"start":{"row":291,"column":32},"end":{"row":291,"column":33},"action":"insert","lines":["l"]},{"start":{"row":291,"column":33},"end":{"row":291,"column":34},"action":"insert","lines":["s"]},{"start":{"row":291,"column":34},"end":{"row":291,"column":35},"action":"insert","lines":["o"]},{"start":{"row":291,"column":35},"end":{"row":291,"column":36},"action":"insert","lines":["u"]},{"start":{"row":291,"column":36},"end":{"row":291,"column":37},"action":"insert","lines":["d"]},{"start":{"row":291,"column":37},"end":{"row":291,"column":38},"action":"insert","lines":["4"]}],[{"start":{"row":291,"column":38},"end":{"row":291,"column":39},"action":"insert","lines":["@"],"id":125},{"start":{"row":291,"column":39},"end":{"row":291,"column":40},"action":"insert","lines":["g"]},{"start":{"row":291,"column":40},"end":{"row":291,"column":41},"action":"insert","lines":["m"]},{"start":{"row":291,"column":41},"end":{"row":291,"column":42},"action":"insert","lines":["a"]},{"start":{"row":291,"column":42},"end":{"row":291,"column":43},"action":"insert","lines":["i"]},{"start":{"row":291,"column":43},"end":{"row":291,"column":44},"action":"insert","lines":["l"]},{"start":{"row":291,"column":44},"end":{"row":291,"column":45},"action":"insert","lines":["."]}],[{"start":{"row":291,"column":45},"end":{"row":291,"column":46},"action":"insert","lines":["c"],"id":126},{"start":{"row":291,"column":46},"end":{"row":291,"column":47},"action":"insert","lines":["o"]},{"start":{"row":291,"column":47},"end":{"row":291,"column":48},"action":"insert","lines":["m"]}],[{"start":{"row":295,"column":0},"end":{"row":295,"column":2},"action":"remove","lines":["  "],"id":131}],[{"start":{"row":295,"column":0},"end":{"row":310,"column":0},"action":"insert","lines":["  OrderManagementSFN:","    Type: AWS::Serverless::StateMachine","    Properties:","      DefinitionUri: src/order-management/statemachine/process-order.asl.json","      DefinitionSubstitutions:","        ManageStateArn: !GetAtt ManageStateFunction.Arn","        ProcessPaymentArn: !GetAtt ProcessPaymentFumction.Arn","        SendOrderToRestaurantArn: !GetAtt SendOrderToRestaurantFunction.Arn","      Policies: ","        - LambdaInvokePolicy:","            FunctionName: !Ref ManageStateFunction","        - LambdaInvokePolicy:","            FunctionName: !Ref ProcessPaymentFumction","        - LambdaInvokePolicy:","            FunctionName: !Ref SendOrderToRestaurantFunction",""],"id":132}],[{"start":{"row":293,"column":30},"end":{"row":294,"column":0},"action":"remove","lines":["",""],"id":133}],[{"start":{"row":293,"column":30},"end":{"row":294,"column":0},"action":"insert","lines":["",""],"id":134},{"start":{"row":294,"column":0},"end":{"row":294,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":245,"column":0},"end":{"row":245,"column":2},"action":"insert","lines":["  "],"id":135},{"start":{"row":246,"column":0},"end":{"row":246,"column":2},"action":"insert","lines":["  "]},{"start":{"row":247,"column":0},"end":{"row":247,"column":2},"action":"insert","lines":["  "]},{"start":{"row":248,"column":0},"end":{"row":248,"column":2},"action":"insert","lines":["  "]},{"start":{"row":249,"column":0},"end":{"row":249,"column":2},"action":"insert","lines":["  "]},{"start":{"row":250,"column":0},"end":{"row":250,"column":2},"action":"insert","lines":["  "]},{"start":{"row":251,"column":0},"end":{"row":251,"column":2},"action":"insert","lines":["  "]},{"start":{"row":252,"column":0},"end":{"row":252,"column":2},"action":"insert","lines":["  "]},{"start":{"row":253,"column":0},"end":{"row":253,"column":2},"action":"insert","lines":["  "]},{"start":{"row":254,"column":0},"end":{"row":254,"column":2},"action":"insert","lines":["  "]},{"start":{"row":255,"column":0},"end":{"row":255,"column":2},"action":"insert","lines":["  "]},{"start":{"row":256,"column":0},"end":{"row":256,"column":2},"action":"insert","lines":["  "]},{"start":{"row":257,"column":0},"end":{"row":257,"column":2},"action":"insert","lines":["  "]},{"start":{"row":258,"column":0},"end":{"row":258,"column":2},"action":"insert","lines":["  "]},{"start":{"row":259,"column":0},"end":{"row":259,"column":2},"action":"insert","lines":["  "]},{"start":{"row":260,"column":0},"end":{"row":260,"column":2},"action":"insert","lines":["  "]},{"start":{"row":261,"column":0},"end":{"row":261,"column":2},"action":"insert","lines":["  "]},{"start":{"row":262,"column":0},"end":{"row":262,"column":2},"action":"insert","lines":["  "]},{"start":{"row":263,"column":0},"end":{"row":263,"column":2},"action":"insert","lines":["  "]},{"start":{"row":264,"column":0},"end":{"row":264,"column":2},"action":"insert","lines":["  "]},{"start":{"row":265,"column":0},"end":{"row":265,"column":2},"action":"insert","lines":["  "]},{"start":{"row":266,"column":0},"end":{"row":266,"column":2},"action":"insert","lines":["  "]},{"start":{"row":267,"column":0},"end":{"row":267,"column":2},"action":"insert","lines":["  "]},{"start":{"row":268,"column":0},"end":{"row":268,"column":2},"action":"insert","lines":["  "]},{"start":{"row":269,"column":0},"end":{"row":269,"column":2},"action":"insert","lines":["  "]},{"start":{"row":270,"column":0},"end":{"row":270,"column":2},"action":"insert","lines":["  "]},{"start":{"row":271,"column":0},"end":{"row":271,"column":2},"action":"insert","lines":["  "]},{"start":{"row":272,"column":0},"end":{"row":272,"column":2},"action":"insert","lines":["  "]},{"start":{"row":273,"column":0},"end":{"row":273,"column":2},"action":"insert","lines":["  "]},{"start":{"row":274,"column":0},"end":{"row":274,"column":2},"action":"insert","lines":["  "]},{"start":{"row":275,"column":0},"end":{"row":275,"column":2},"action":"insert","lines":["  "]},{"start":{"row":276,"column":0},"end":{"row":276,"column":2},"action":"insert","lines":["  "]},{"start":{"row":277,"column":0},"end":{"row":277,"column":2},"action":"insert","lines":["  "]},{"start":{"row":278,"column":0},"end":{"row":278,"column":2},"action":"insert","lines":["  "]},{"start":{"row":279,"column":0},"end":{"row":279,"column":2},"action":"insert","lines":["  "]},{"start":{"row":280,"column":0},"end":{"row":280,"column":2},"action":"insert","lines":["  "]},{"start":{"row":281,"column":0},"end":{"row":281,"column":2},"action":"insert","lines":["  "]},{"start":{"row":282,"column":0},"end":{"row":282,"column":2},"action":"insert","lines":["  "]},{"start":{"row":283,"column":0},"end":{"row":283,"column":2},"action":"insert","lines":["  "]},{"start":{"row":284,"column":0},"end":{"row":284,"column":2},"action":"insert","lines":["  "]},{"start":{"row":285,"column":0},"end":{"row":285,"column":2},"action":"insert","lines":["  "]},{"start":{"row":286,"column":0},"end":{"row":286,"column":2},"action":"insert","lines":["  "]},{"start":{"row":287,"column":0},"end":{"row":287,"column":2},"action":"insert","lines":["  "]},{"start":{"row":288,"column":0},"end":{"row":288,"column":2},"action":"insert","lines":["  "]},{"start":{"row":289,"column":0},"end":{"row":289,"column":2},"action":"insert","lines":["  "]},{"start":{"row":290,"column":0},"end":{"row":290,"column":2},"action":"insert","lines":["  "]},{"start":{"row":291,"column":0},"end":{"row":291,"column":2},"action":"insert","lines":["  "]},{"start":{"row":292,"column":0},"end":{"row":292,"column":2},"action":"insert","lines":["  "]},{"start":{"row":293,"column":0},"end":{"row":293,"column":2},"action":"insert","lines":["  "]},{"start":{"row":294,"column":0},"end":{"row":294,"column":2},"action":"insert","lines":["  "]},{"start":{"row":295,"column":0},"end":{"row":295,"column":2},"action":"insert","lines":["  "]},{"start":{"row":296,"column":0},"end":{"row":296,"column":2},"action":"insert","lines":["  "]},{"start":{"row":297,"column":0},"end":{"row":297,"column":2},"action":"insert","lines":["  "]},{"start":{"row":298,"column":0},"end":{"row":298,"column":2},"action":"insert","lines":["  "]},{"start":{"row":299,"column":0},"end":{"row":299,"column":2},"action":"insert","lines":["  "]},{"start":{"row":300,"column":0},"end":{"row":300,"column":2},"action":"insert","lines":["  "]},{"start":{"row":301,"column":0},"end":{"row":301,"column":2},"action":"insert","lines":["  "]},{"start":{"row":302,"column":0},"end":{"row":302,"column":2},"action":"insert","lines":["  "]},{"start":{"row":303,"column":0},"end":{"row":303,"column":2},"action":"insert","lines":["  "]},{"start":{"row":304,"column":0},"end":{"row":304,"column":2},"action":"insert","lines":["  "]},{"start":{"row":305,"column":0},"end":{"row":305,"column":2},"action":"insert","lines":["  "]},{"start":{"row":306,"column":0},"end":{"row":306,"column":2},"action":"insert","lines":["  "]},{"start":{"row":307,"column":0},"end":{"row":307,"column":2},"action":"insert","lines":["  "]},{"start":{"row":308,"column":0},"end":{"row":308,"column":2},"action":"insert","lines":["  "]},{"start":{"row":309,"column":0},"end":{"row":309,"column":2},"action":"insert","lines":["  "]},{"start":{"row":310,"column":0},"end":{"row":310,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":310,"column":0},"end":{"row":310,"column":2},"action":"remove","lines":["  "],"id":136}],[{"start":{"row":227,"column":0},"end":{"row":228,"column":0},"action":"remove","lines":["",""],"id":137},{"start":{"row":226,"column":35},"end":{"row":227,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":343,"column":0},"action":"remove","lines":["AWSTemplateFormatVersion: '2010-09-09'","Transform: AWS::Serverless-2016-10-31","Description: >","  order-app","","  Sample SAM Template for order-app","  ","Globals:","  Function:","    Timeout: 3","","Resources:","  OrderTable:","    Type: AWS::DynamoDB::Table","    Properties: ","      TableName: order-table","      AttributeDefinitions: ","        - AttributeName: user_id","          AttributeType: S","        - AttributeName: id","          AttributeType: S","      KeySchema: ","        - AttributeName: user_id","          KeyType: HASH","        - AttributeName: id","          KeyType: RANGE","      ProvisionedThroughput: ","        ReadCapacityUnits: 5","        WriteCapacityUnits: 5","  GetOrders:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/get-orders/","      Handler: app.getOrders","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","              - dynamodb:Query ","              - dynamodb:Scan","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\" ","  PostOrders:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Events:","        SQSEventSource:","          Type: SQS","          Properties:","            Queue: !GetAtt OrderQueue.Arn","            BatchSize: 10","      Environment:","        Variables:","          STATE_MACHINE_ARN: !Ref OrderManagementSFN","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"    ","          - Effect: Allow","            Action:","              - states:StartExecution","            Resource:","              - !Sub ","                - '${StateMachine}'","                - { StateMachine: !Ref OrderManagementSFN }","  PostOrdersSync:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders-sync/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:PutItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","  GetSingleOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/get-single-order/","      Handler: app.getOrderById","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","  UpdateOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/update-order/","      Handler: app.updateOrder","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:UpdateItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"      ","  DeleteOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/delete-order/","      Handler: app.deleteOrder","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:DeleteItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"    ","","  OrderApi:","    Type: AWS::Serverless::Api","    Properties:","      StageName: Dev","      Cors:","        AllowMethods: \"'POST, GET, UPDATE, DELETE'\"","        AllowHeaders: \"'X-Forwarded-For'\"","        AllowOrigin: \"'*'\"","        MaxAge: \"'600'\"","      DefinitionBody:","        'Fn::Transform':","          Name: 'AWS::Include'","          Parameters:","            Location: './api.yaml'","","  ApiGwExecutionRole: ","    Type: \"AWS::IAM::Role\"","    Properties: ","      AssumeRolePolicyDocument: ","        Version: \"2012-10-17\"","        Statement: ","          - ","            Effect: \"Allow\"","            Principal: ","              Service: ","                - \"apigateway.amazonaws.com\"","                - \"lambda.amazonaws.com\"","            Action: ","              - \"sts:AssumeRole\"","      Path: \"/\"","","  ApiGwExecutionPolicy: ","    Type: \"AWS::IAM::Policy\"","    Properties: ","      PolicyName: \"apigw-execution-policy\"","      PolicyDocument: ","        Version: \"2012-10-17\"","        Statement: ","          Action:","            - sqs:SendMessage","            - lambda:*","          Effect: Allow","          Resource:","            - !GetAtt GetOrders.Arn","            - !GetAtt OrderQueue.Arn","            - !GetAtt PostOrdersSync.Arn","            - !GetAtt GetSingleOrder.Arn","            - !GetAtt UpdateOrder.Arn","            - !GetAtt DeleteOrder.Arn","      Roles: ","        - Ref: \"ApiGwExecutionRole\"","  OrderQueue:","    Type: AWS::SQS::Queue","    Properties:","      RedrivePolicy:","        deadLetterTargetArn: !GetAtt OrderDLQueue.Arn","        maxReceiveCount: 5","  ","  OrderDLQueue:","    Type: AWS::SQS::Queue","","  ProcessPaymentFumction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/process-payment/","      Handler: app.processPayment","      Runtime: nodejs14.x","  ","  SendOrderToRestaurantFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/sendordertorestaurant/","      Handler: app.sendOrderToRestaurant","      Runtime: nodejs14.x","  ","   ManageStateFunction:","      Type: AWS::Serverless::Function","      Properties:","        CodeUri: src/order-management/functions/managestate/","        Handler: app.manageState","        Runtime: nodejs14.x","        Environment:","          Variables:","            ORDER_TABLE: !Ref OrderTable","            SNS_TOPIC_ARN: !Ref OrderTopic","        Policies:","          Statement:","            - Effect: Allow","              Action:","                - dynamodb:GetItem","                - dynamodb:Query ","                - dynamodb:Scan","                - dynamodb:PutItem","                - dynamodb:UpdateItem","              Resource:","                - !Sub ","                  - 'arn:aws:dynamodb:*:*:table/${Table}'","                  - { Table: !Ref OrderTable }","            - Effect: Allow","              Action:","                - logs:*","              Resource:","                - \"*\"    ","            - Effect: Allow","              Action:","                - SNS:Publish","              Resource:","                - \"*\"    ","    ","    OrderTopic:","      Type: AWS::SNS::Topic","      Properties: ","        Subscription: ","          - Endpoint: \"mohammedabulsoud4@gmail.com\"","            Protocol: \"email\"","        TopicName: \"order-topic\"","        ","    OrderManagementSFN:","      Type: AWS::Serverless::StateMachine","      Properties:","        DefinitionUri: src/order-management/statemachine/process-order.asl.json","        DefinitionSubstitutions:","          ManageStateArn: !GetAtt ManageStateFunction.Arn","          ProcessPaymentArn: !GetAtt ProcessPaymentFumction.Arn","          SendOrderToRestaurantArn: !GetAtt SendOrderToRestaurantFunction.Arn","        Policies: ","          - LambdaInvokePolicy:","              FunctionName: !Ref ManageStateFunction","          - LambdaInvokePolicy:","              FunctionName: !Ref ProcessPaymentFumction","          - LambdaInvokePolicy:","              FunctionName: !Ref SendOrderToRestaurantFunction","","","Outputs:","  DynamoDBTableName:","    Description: \"DynamoDB Table Name\"","    Value: !Ref OrderTable","  GetOrders:","    Description: \"GetOrders Lambda Function ARN\"","    Value: !GetAtt GetOrders.Arn","  OrderApiEndpoint:","    Description: \"API Gateway endpoint URL for Dev stage for Order Get function\"","    Value: !Sub \"https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/orders/\"","  PostOrders:","    Description: \"PostOrders Lambda Function ARN\"","    Value: !GetAtt PostOrders.Arn","  PostOrders:","    Description: \"PostOrdersSync Lambda Function ARN\"","    Value: !GetAtt PostOrdersSync.Arn","  GetSingleOrder:","    Description: \"GetSingleOrder Lambda Function ARN\"","    Value: !GetAtt GetSingleOrder.Arn","  UpdateOrder:","    Description: \"UpdateOrder Lambda Function ARN\"","    Value: !GetAtt UpdateOrder.Arn","  DeleteOrder:","    Description: \"DeleteOrder Lambda Function ARN\"","    Value: !GetAtt DeleteOrder.Arn","  OrderQueueUrl:","    Description: \"URL of order queue\"","    Value: !Ref OrderQueue","  OrderDLQueueUrl:","    Description: \"URL of order dead-letter queue\"","    Value: !Ref OrderDLQueue","","",""],"id":137},{"start":{"row":0,"column":0},"end":{"row":310,"column":0},"action":"insert","lines":["AWSTemplateFormatVersion: '2010-09-09'","Transform: AWS::Serverless-2016-10-31","Description: >","  order-app","","  Sample SAM Template for order-app","  ","Globals:","  Function:","    Timeout: 3","","Resources:","  OrderTable:","    Type: AWS::DynamoDB::Table","    Properties: ","      TableName: order-table","      AttributeDefinitions: ","        - AttributeName: user_id","          AttributeType: S","        - AttributeName: id","          AttributeType: S","      KeySchema: ","        - AttributeName: user_id","          KeyType: HASH","        - AttributeName: id","          KeyType: RANGE","      ProvisionedThroughput: ","        ReadCapacityUnits: 5","        WriteCapacityUnits: 5","  GetOrders:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/get-orders/","      Handler: app.getOrders","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","              - dynamodb:Query ","              - dynamodb:Scan","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\" ","  PostOrders:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Events:","        SQSEventSource:","          Type: SQS","          Properties:","            Queue: !GetAtt OrderQueue.Arn","            BatchSize: 10","      Environment:","        Variables:","          STATE_MACHINE_ARN: !Ref OrderManagementSFN","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"    ","          - Effect: Allow","            Action:","              - states:StartExecution","            Resource:","              - !Sub ","                - '${StateMachine}'","                - { StateMachine: !Ref OrderManagementSFN }","  GetSingleOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/get-single-order/","      Handler: app.getOrderById","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","  UpdateOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/update-order/","      Handler: app.updateOrder","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:UpdateItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"      ","  DeleteOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/delete-order/","      Handler: app.deleteOrder","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:DeleteItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"    ","","  OrderApi:","    Type: AWS::Serverless::Api","    Properties:","      StageName: Dev","      Cors:","        AllowMethods: \"'POST, GET, UPDATE, DELETE'\"","        AllowHeaders: \"'X-Forwarded-For'\"","        AllowOrigin: \"'*'\"","        MaxAge: \"'600'\"","      DefinitionBody:","        'Fn::Transform':","          Name: 'AWS::Include'","          Parameters:","            Location: './api.yaml'","","  OrderQueue:","    Type: AWS::SQS::Queue","    Properties: ","      RedrivePolicy: ","        deadLetterTargetArn: !GetAtt OrderDLQueue.Arn","        maxReceiveCount: 5","","  OrderDLQueue:","    Type: AWS::SQS::Queue","","  ApiGwExecutionRole: ","    Type: \"AWS::IAM::Role\"","    Properties: ","      AssumeRolePolicyDocument: ","        Version: \"2012-10-17\"","        Statement: ","          - ","            Effect: \"Allow\"","            Principal: ","              Service: ","                - \"apigateway.amazonaws.com\"","                - \"lambda.amazonaws.com\"","            Action: ","              - \"sts:AssumeRole\"","      Path: \"/\"","","  ApiGwExecutionPolicy: ","    Type: \"AWS::IAM::Policy\"","    Properties: ","      PolicyName: \"apigw-execution-policy\"","      PolicyDocument: ","        Version: \"2012-10-17\"","        Statement: ","          Action:","            - sqs:SendMessage","            - lambda:*","          Effect: Allow","          Resource:","            - !GetAtt GetOrders.Arn","            - !GetAtt OrderQueue.Arn","            - !GetAtt GetSingleOrder.Arn","            - !GetAtt UpdateOrder.Arn","            - !GetAtt DeleteOrder.Arn","      Roles: ","        - Ref: \"ApiGwExecutionRole\"","","  ProcessPaymentFumction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/process-payment/","      Handler: app.processPayment","      Runtime: nodejs14.x","","  SendOrderToRestaurantFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/sendordertorestaurant/","      Handler: app.sendOrderToRestaurant","      Runtime: nodejs14.x","","  ManageStateFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/managestate/","      Handler: app.manageState","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","          SNS_TOPIC_ARN: !Ref OrderTopic","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","              - dynamodb:Query ","              - dynamodb:Scan","              - dynamodb:PutItem","              - dynamodb:UpdateItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"   ","  ","  OrderTopic:","    Type: AWS::SNS::Topic","    Properties: ","      Subscription: ","        - Endpoint: \"test@gmail.com\"","          Protocol: \"email\"","      TopicName: \"order-topic\"","","  OrderManagementSFN:","    Type: AWS::Serverless::StateMachine","    Properties:","      DefinitionUri: src/order-management/statemachine/process-order.asl.json","      DefinitionSubstitutions:","        ManageStateArn: !GetAtt ManageStateFunction.Arn","        ProcessPaymentArn: !GetAtt ProcessPaymentFumction.Arn","        SendOrderToRestaurantArn: !GetAtt SendOrderToRestaurantFunction.Arn","      Policies: ","        - LambdaInvokePolicy:","            FunctionName: !Ref ManageStateFunction","        - LambdaInvokePolicy:","            FunctionName: !Ref ProcessPaymentFumction","        - LambdaInvokePolicy:","            FunctionName: !Ref SendOrderToRestaurantFunction","","Outputs:","  DynamoDBTableName:","    Description: \"DynamoDB Table Name\"","    Value: !Ref OrderTable","  GetOrders:","    Description: \"GetOrders Lambda Function ARN\"","    Value: !GetAtt GetOrders.Arn","  OrderApiEndpoint:","    Description: \"API Gateway endpoint URL for Dev stage for Order Get function\"","    Value: !Sub \"https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/orders/\"","  PostOrders:","    Description: \"PostOrders Lambda Function ARN\"","    Value: !GetAtt PostOrders.Arn","  GetSingleOrder:","    Description: \"GetSingleOrder Lambda Function ARN\"","    Value: !GetAtt GetSingleOrder.Arn","  UpdateOrder:","    Description: \"UpdateOrder Lambda Function ARN\"","    Value: !GetAtt UpdateOrder.Arn","  DeleteOrder:","    Description: \"DeleteOrder Lambda Function ARN\"","    Value: !GetAtt DeleteOrder.Arn","  OrderQueueUrl: ","    Description: \"URL of order queue\"","    Value: !Ref OrderDLQueue","  OrderDLQueueUrl: ","    Description: \"URL of order dead-letter queue\"","    Value: !Ref OrderDLQueue","",""]}],[{"start":{"row":293,"column":33},"end":{"row":294,"column":0},"action":"insert","lines":["",""],"id":139},{"start":{"row":294,"column":0},"end":{"row":294,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":294,"column":0},"end":{"row":294,"column":4},"action":"remove","lines":["    "],"id":140},{"start":{"row":294,"column":0},"end":{"row":295,"column":53},"action":"insert","lines":["  PostOrdersSync:","    Description: \"PostOrdersSync Lambda Function ARN\""]}],[{"start":{"row":82,"column":59},"end":{"row":83,"column":0},"action":"insert","lines":["",""],"id":141},{"start":{"row":83,"column":0},"end":{"row":83,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":83,"column":0},"end":{"row":83,"column":16},"action":"remove","lines":["                "],"id":142},{"start":{"row":83,"column":0},"end":{"row":83,"column":15},"action":"insert","lines":["PostOrdersSync:"]}],[{"start":{"row":83,"column":0},"end":{"row":83,"column":15},"action":"remove","lines":["PostOrdersSync:"],"id":143},{"start":{"row":83,"column":0},"end":{"row":105,"column":19},"action":"insert","lines":["  PostOrdersSync:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders-sync/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:PutItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\""]}],[{"start":{"row":334,"column":0},"end":{"row":335,"column":0},"action":"remove","lines":["",""],"id":145},{"start":{"row":333,"column":28},"end":{"row":334,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":333,"column":28},"end":{"row":334,"column":0},"action":"insert","lines":["",""],"id":146},{"start":{"row":334,"column":0},"end":{"row":334,"column":4},"action":"insert","lines":["    "]},{"start":{"row":334,"column":4},"end":{"row":335,"column":0},"action":"insert","lines":["",""]},{"start":{"row":335,"column":0},"end":{"row":335,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":335,"column":2},"end":{"row":335,"column":4},"action":"remove","lines":["  "],"id":147},{"start":{"row":335,"column":0},"end":{"row":335,"column":2},"action":"remove","lines":["  "]},{"start":{"row":334,"column":4},"end":{"row":335,"column":0},"action":"remove","lines":["",""]},{"start":{"row":334,"column":2},"end":{"row":334,"column":4},"action":"remove","lines":["  "]},{"start":{"row":334,"column":0},"end":{"row":334,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":333,"column":28},"end":{"row":334,"column":0},"action":"remove","lines":["",""],"id":148}],[{"start":{"row":318,"column":53},"end":{"row":319,"column":0},"action":"insert","lines":["",""],"id":149},{"start":{"row":319,"column":0},"end":{"row":319,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":319,"column":4},"end":{"row":320,"column":0},"action":"insert","lines":["    Value: !GetAtt PostOrdersSync.Arn",""],"id":150}],[{"start":{"row":319,"column":0},"end":{"row":319,"column":2},"action":"remove","lines":["  "],"id":151}],[{"start":{"row":319,"column":0},"end":{"row":319,"column":2},"action":"remove","lines":["  "],"id":152}],[{"start":{"row":319,"column":37},"end":{"row":320,"column":0},"action":"remove","lines":["",""],"id":153}],[{"start":{"row":284,"column":21},"end":{"row":284,"column":25},"action":"remove","lines":["test"],"id":154},{"start":{"row":284,"column":21},"end":{"row":284,"column":22},"action":"insert","lines":["m"]},{"start":{"row":284,"column":22},"end":{"row":284,"column":23},"action":"insert","lines":["o"]},{"start":{"row":284,"column":23},"end":{"row":284,"column":24},"action":"insert","lines":["h"]},{"start":{"row":284,"column":24},"end":{"row":284,"column":25},"action":"insert","lines":["a"]},{"start":{"row":284,"column":25},"end":{"row":284,"column":26},"action":"insert","lines":["m"]},{"start":{"row":284,"column":26},"end":{"row":284,"column":27},"action":"insert","lines":["m"]},{"start":{"row":284,"column":27},"end":{"row":284,"column":28},"action":"insert","lines":["e"]},{"start":{"row":284,"column":28},"end":{"row":284,"column":29},"action":"insert","lines":["d"]},{"start":{"row":284,"column":29},"end":{"row":284,"column":30},"action":"insert","lines":["a"]},{"start":{"row":284,"column":30},"end":{"row":284,"column":31},"action":"insert","lines":["b"]},{"start":{"row":284,"column":31},"end":{"row":284,"column":32},"action":"insert","lines":["u"]},{"start":{"row":284,"column":32},"end":{"row":284,"column":33},"action":"insert","lines":["l"]}],[{"start":{"row":284,"column":33},"end":{"row":284,"column":34},"action":"insert","lines":["s"],"id":155},{"start":{"row":284,"column":34},"end":{"row":284,"column":35},"action":"insert","lines":["o"]},{"start":{"row":284,"column":35},"end":{"row":284,"column":36},"action":"insert","lines":["u"]},{"start":{"row":284,"column":36},"end":{"row":284,"column":37},"action":"insert","lines":["d"]},{"start":{"row":284,"column":37},"end":{"row":284,"column":38},"action":"insert","lines":["4"]}],[{"start":{"row":302,"column":60},"end":{"row":303,"column":0},"action":"insert","lines":["",""],"id":156},{"start":{"row":303,"column":0},"end":{"row":303,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":303,"column":0},"end":{"row":303,"column":12},"action":"remove","lines":["            "],"id":157}],[{"start":{"row":303,"column":0},"end":{"row":328,"column":0},"action":"insert","lines":["  OrderCognitoPool:","    Type: AWS::Cognito::UserPool","    Properties:","      UserPoolName: orders-pool","      Policies:","        PasswordPolicy:","          MinimumLength: 8","      UsernameAttributes:","        - email","      Schema:","        - AttributeDataType: String","          Name: email","          Required: true","","  OrderCognitoPoolClient:","    Type: AWS::Cognito::UserPoolClient","    Properties:","      UserPoolId: !Ref OrderCognitoPool","      ClientName: order-pool-client","      ExplicitAuthFlows:","        - ALLOW_ADMIN_USER_PASSWORD_AUTH","        - ALLOW_REFRESH_TOKEN_AUTH","      GenerateSecret: true","      SupportedIdentityProviders:","        - COGNITO",""],"id":159}],[{"start":{"row":360,"column":28},"end":{"row":361,"column":0},"action":"insert","lines":["",""],"id":160},{"start":{"row":361,"column":0},"end":{"row":361,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":361,"column":0},"end":{"row":361,"column":2},"action":"remove","lines":["  "],"id":161}],[{"start":{"row":361,"column":0},"end":{"row":361,"column":2},"action":"remove","lines":["  "],"id":163},{"start":{"row":361,"column":0},"end":{"row":367,"column":0},"action":"insert","lines":["  CognitoClientID:","    Description: \"The client ID of the Cognito user pool\"","    Value: !Ref OrderCognitoPoolClient","  CognitoUserPoolID:","    Description: \"ID of the Cognito userpool\"","    Value: !Ref OrderCognitoPool",""]}],[{"start":{"row":177,"column":30},"end":{"row":178,"column":0},"action":"insert","lines":["",""],"id":164},{"start":{"row":178,"column":0},"end":{"row":178,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":178,"column":0},"end":{"row":178,"column":4},"action":"remove","lines":["    "],"id":166},{"start":{"row":178,"column":0},"end":{"row":183,"column":0},"action":"insert","lines":["      Auth:","        DefaultAuthorizer: MyCognitoAuthorizer","        Authorizers:","          MyCognitoAuthorizer:","            UserPoolArn: !GetAtt OrderCognitoPool.Arn",""]}],[{"start":{"row":178,"column":0},"end":{"row":178,"column":2},"action":"remove","lines":["  "],"id":167},{"start":{"row":179,"column":0},"end":{"row":179,"column":2},"action":"remove","lines":["  "]},{"start":{"row":180,"column":0},"end":{"row":180,"column":2},"action":"remove","lines":["  "]},{"start":{"row":181,"column":0},"end":{"row":181,"column":2},"action":"remove","lines":["  "]},{"start":{"row":182,"column":0},"end":{"row":182,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":182,"column":51},"end":{"row":183,"column":0},"action":"remove","lines":["",""],"id":168}],[{"start":{"row":0,"column":0},"end":{"row":372,"column":0},"action":"remove","lines":["AWSTemplateFormatVersion: '2010-09-09'","Transform: AWS::Serverless-2016-10-31","Description: >","  order-app","","  Sample SAM Template for order-app","  ","Globals:","  Function:","    Timeout: 3","","Resources:","  OrderTable:","    Type: AWS::DynamoDB::Table","    Properties: ","      TableName: order-table","      AttributeDefinitions: ","        - AttributeName: user_id","          AttributeType: S","        - AttributeName: id","          AttributeType: S","      KeySchema: ","        - AttributeName: user_id","          KeyType: HASH","        - AttributeName: id","          KeyType: RANGE","      ProvisionedThroughput: ","        ReadCapacityUnits: 5","        WriteCapacityUnits: 5","  GetOrders:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/get-orders/","      Handler: app.getOrders","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","              - dynamodb:Query ","              - dynamodb:Scan","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\" ","  PostOrders:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Events:","        SQSEventSource:","          Type: SQS","          Properties:","            Queue: !GetAtt OrderQueue.Arn","            BatchSize: 10","      Environment:","        Variables:","          STATE_MACHINE_ARN: !Ref OrderManagementSFN","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"    ","          - Effect: Allow","            Action:","              - states:StartExecution","            Resource:","              - !Sub ","                - '${StateMachine}'","                - { StateMachine: !Ref OrderManagementSFN }","  PostOrdersSync:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders-sync/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:PutItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","  GetSingleOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/get-single-order/","      Handler: app.getOrderById","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","  UpdateOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/update-order/","      Handler: app.updateOrder","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:UpdateItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"      ","  DeleteOrder:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/delete-order/","      Handler: app.deleteOrder","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:DeleteItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"    ","","  OrderApi:","    Type: AWS::Serverless::Api","    Auth:","      DefaultAuthorizer: MyCognitoAuthorizer","      Authorizers:","        MyCognitoAuthorizer:","          UserPoolArn: !GetAtt OrderCognitoPool.Arn","    Properties:","      StageName: Dev","      Cors:","        AllowMethods: \"'POST, GET, UPDATE, DELETE'\"","        AllowHeaders: \"'X-Forwarded-For'\"","        AllowOrigin: \"'*'\"","        MaxAge: \"'600'\"","      DefinitionBody:","        'Fn::Transform':","          Name: 'AWS::Include'","          Parameters:","            Location: './api.yaml'","","  OrderQueue:","    Type: AWS::SQS::Queue","    Properties: ","      RedrivePolicy: ","        deadLetterTargetArn: !GetAtt OrderDLQueue.Arn","        maxReceiveCount: 5","","  OrderDLQueue:","    Type: AWS::SQS::Queue","","  ApiGwExecutionRole: ","    Type: \"AWS::IAM::Role\"","    Properties: ","      AssumeRolePolicyDocument: ","        Version: \"2012-10-17\"","        Statement: ","          - ","            Effect: \"Allow\"","            Principal: ","              Service: ","                - \"apigateway.amazonaws.com\"","                - \"lambda.amazonaws.com\"","            Action: ","              - \"sts:AssumeRole\"","      Path: \"/\"","","  ApiGwExecutionPolicy: ","    Type: \"AWS::IAM::Policy\"","    Properties: ","      PolicyName: \"apigw-execution-policy\"","      PolicyDocument: ","        Version: \"2012-10-17\"","        Statement: ","          Action:","            - sqs:SendMessage","            - lambda:*","          Effect: Allow","          Resource:","            - !GetAtt GetOrders.Arn","            - !GetAtt OrderQueue.Arn","            - !GetAtt GetSingleOrder.Arn","            - !GetAtt UpdateOrder.Arn","            - !GetAtt DeleteOrder.Arn","      Roles: ","        - Ref: \"ApiGwExecutionRole\"","","  ProcessPaymentFumction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/process-payment/","      Handler: app.processPayment","      Runtime: nodejs14.x","","  SendOrderToRestaurantFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/sendordertorestaurant/","      Handler: app.sendOrderToRestaurant","      Runtime: nodejs14.x","","  ManageStateFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/managestate/","      Handler: app.manageState","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","          SNS_TOPIC_ARN: !Ref OrderTopic","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","              - dynamodb:Query ","              - dynamodb:Scan","              - dynamodb:PutItem","              - dynamodb:UpdateItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"   ","  ","  OrderTopic:","    Type: AWS::SNS::Topic","    Properties: ","      Subscription: ","        - Endpoint: \"mohammedabulsoud4@gmail.com\"","          Protocol: \"email\"","      TopicName: \"order-topic\"","","  OrderManagementSFN:","    Type: AWS::Serverless::StateMachine","    Properties:","      DefinitionUri: src/order-management/statemachine/process-order.asl.json","      DefinitionSubstitutions:","        ManageStateArn: !GetAtt ManageStateFunction.Arn","        ProcessPaymentArn: !GetAtt ProcessPaymentFumction.Arn","        SendOrderToRestaurantArn: !GetAtt SendOrderToRestaurantFunction.Arn","      Policies: ","        - LambdaInvokePolicy:","            FunctionName: !Ref ManageStateFunction","        - LambdaInvokePolicy:","            FunctionName: !Ref ProcessPaymentFumction","        - LambdaInvokePolicy:","            FunctionName: !Ref SendOrderToRestaurantFunction","  OrderCognitoPool:","    Type: AWS::Cognito::UserPool","    Properties:","      UserPoolName: orders-pool","      Policies:","        PasswordPolicy:","          MinimumLength: 8","      UsernameAttributes:","        - email","      Schema:","        - AttributeDataType: String","          Name: email","          Required: true","","  OrderCognitoPoolClient:","    Type: AWS::Cognito::UserPoolClient","    Properties:","      UserPoolId: !Ref OrderCognitoPool","      ClientName: order-pool-client","      ExplicitAuthFlows:","        - ALLOW_ADMIN_USER_PASSWORD_AUTH","        - ALLOW_REFRESH_TOKEN_AUTH","      GenerateSecret: true","      SupportedIdentityProviders:","        - COGNITO","","","Outputs:","  DynamoDBTableName:","    Description: \"DynamoDB Table Name\"","    Value: !Ref OrderTable","  GetOrders:","    Description: \"GetOrders Lambda Function ARN\"","    Value: !GetAtt GetOrders.Arn","  OrderApiEndpoint:","    Description: \"API Gateway endpoint URL for Dev stage for Order Get function\"","    Value: !Sub \"https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/orders/\"","  PostOrders:","    Description: \"PostOrders Lambda Function ARN\"","    Value: !GetAtt PostOrders.Arn","  PostOrdersSync:","    Description: \"PostOrdersSync Lambda Function ARN\"","    Value: !GetAtt PostOrdersSync.Arn","  GetSingleOrder:","    Description: \"GetSingleOrder Lambda Function ARN\"","    Value: !GetAtt GetSingleOrder.Arn","  UpdateOrder:","    Description: \"UpdateOrder Lambda Function ARN\"","    Value: !GetAtt UpdateOrder.Arn","  DeleteOrder:","    Description: \"DeleteOrder Lambda Function ARN\"","    Value: !GetAtt DeleteOrder.Arn","  OrderQueueUrl: ","    Description: \"URL of order queue\"","    Value: !Ref OrderDLQueue","  OrderDLQueueUrl: ","    Description: \"URL of order dead-letter queue\"","    Value: !Ref OrderDLQueue","  CognitoClientID:","    Description: \"The client ID of the Cognito user pool\"","    Value: !Ref OrderCognitoPoolClient","  CognitoUserPoolID:","    Description: \"ID of the Cognito userpool\"","    Value: !Ref OrderCognitoPool",""],"id":169},{"start":{"row":0,"column":0},"end":{"row":25,"column":0},"action":"insert","lines":["  OrderCognitoPool:","    Type: AWS::Cognito::UserPool","    Properties:","      UserPoolName: orders-pool","      Policies:","        PasswordPolicy:","          MinimumLength: 8","      UsernameAttributes:","        - email","      Schema:","        - AttributeDataType: String","          Name: email","          Required: true","","  OrderCognitoPoolClient:","    Type: AWS::Cognito::UserPoolClient","    Properties:","      UserPoolId: !Ref OrderCognitoPool","      ClientName: order-pool-client","      ExplicitAuthFlows:","        - ALLOW_ADMIN_USER_PASSWORD_AUTH","        - ALLOW_REFRESH_TOKEN_AUTH","      GenerateSecret: true","      SupportedIdentityProviders:","        - COGNITO",""]}],[{"start":{"row":0,"column":0},"end":{"row":25,"column":0},"action":"remove","lines":["  OrderCognitoPool:","    Type: AWS::Cognito::UserPool","    Properties:","      UserPoolName: orders-pool","      Policies:","        PasswordPolicy:","          MinimumLength: 8","      UsernameAttributes:","        - email","      Schema:","        - AttributeDataType: String","          Name: email","          Required: true","","  OrderCognitoPoolClient:","    Type: AWS::Cognito::UserPoolClient","    Properties:","      UserPoolId: !Ref OrderCognitoPool","      ClientName: order-pool-client","      ExplicitAuthFlows:","        - ALLOW_ADMIN_USER_PASSWORD_AUTH","        - ALLOW_REFRESH_TOKEN_AUTH","      GenerateSecret: true","      SupportedIdentityProviders:","        - COGNITO",""],"id":170},{"start":{"row":0,"column":0},"end":{"row":344,"column":0},"action":"insert","lines":["AWSTemplateFormatVersion: \"2010-09-09\"","Transform: AWS::Serverless-2016-10-31","Description: >","  order-app","","  Sample SAM Template for order-app","","Globals:","  Function:","    Timeout: 3","","Resources:","  OrderTable:","    Type: AWS::DynamoDB::Table","    Properties:","      TableName: order-table","      AttributeDefinitions:","        - AttributeName: user_id","          AttributeType: S","        - AttributeName: id","          AttributeType: S","      KeySchema:","        - AttributeName: user_id","          KeyType: HASH","        - AttributeName: id","          KeyType: RANGE","      ProvisionedThroughput:","        ReadCapacityUnits: 5","        WriteCapacityUnits: 5","  GetOrders:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-api/functions/get-orders/","      Handler: app.getOrders","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","              - dynamodb:Query","              - dynamodb:Scan","            Resource:","              - !Sub","                - \"arn:aws:dynamodb:*:*:table/${Table}\"","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","  PostOrders:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-api/functions/post-orders/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Events:","        SQSEventSource:","          Type: SQS","          Properties:","            Queue: !GetAtt OrderQueue.Arn","            BatchSize: 10","      Environment:","        Variables:","          STATE_MACHINE_ARN: !Ref OrderManagementSFN","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","          - Effect: Allow","            Action:","              - states:StartExecution","            Resource:","              - !Sub","                - \"${StateMachine}\"","                - { StateMachine: !Ref OrderManagementSFN }","  GetSingleOrder:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-api/functions/get-single-order/","      Handler: app.getOrderById","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","            Resource:","              - !Sub","                - \"arn:aws:dynamodb:*:*:table/${Table}\"","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","  UpdateOrder:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-api/functions/update-order/","      Handler: app.updateOrder","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:UpdateItem","            Resource:","              - !Sub","                - \"arn:aws:dynamodb:*:*:table/${Table}\"","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","  DeleteOrder:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-api/functions/delete-order/","      Handler: app.deleteOrder","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:DeleteItem","            Resource:","              - !Sub","                - \"arn:aws:dynamodb:*:*:table/${Table}\"","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","","  OrderApi:","    Type: AWS::Serverless::Api","    Properties:","      StageName: Dev","      Cors:","        AllowMethods: \"'POST, GET, UPDATE, DELETE'\"","        AllowHeaders: \"'X-Forwarded-For'\"","        AllowOrigin: \"'*'\"","        MaxAge: \"'600'\"","      Auth:","        DefaultAuthorizer: MyCognitoAuthorizer","        Authorizers:","          MyCognitoAuthorizer:","            UserPoolArn: !GetAtt OrderCognitoPool.Arn","      DefinitionBody:","        \"Fn::Transform\":","          Name: \"AWS::Include\"","          Parameters:","            Location: \"./api.yaml\"","","  OrderQueue:","    Type: AWS::SQS::Queue","    Properties:","      RedrivePolicy:","        deadLetterTargetArn: !GetAtt OrderDLQueue.Arn","        maxReceiveCount: 5","","  OrderDLQueue:","    Type: AWS::SQS::Queue","","  ApiGwExecutionRole:","    Type: \"AWS::IAM::Role\"","    Properties:","      AssumeRolePolicyDocument:","        Version: \"2012-10-17\"","        Statement:","          - Effect: \"Allow\"","            Principal:","              Service:","                - \"apigateway.amazonaws.com\"","                - \"lambda.amazonaws.com\"","            Action:","              - \"sts:AssumeRole\"","      Path: \"/\"","","  ApiGwExecutionPolicy:","    Type: \"AWS::IAM::Policy\"","    Properties:","      PolicyName: \"apigw-execution-policy\"","      PolicyDocument:","        Version: \"2012-10-17\"","        Statement:","          Action:","            - sqs:SendMessage","            - lambda:*","          Effect: Allow","          Resource:","            - !GetAtt GetOrders.Arn","            - !GetAtt OrderQueue.Arn","            - !GetAtt GetSingleOrder.Arn","            - !GetAtt UpdateOrder.Arn","            - !GetAtt DeleteOrder.Arn","      Roles:","        - Ref: \"ApiGwExecutionRole\"","","  ProcessPaymentFumction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/process-payment/","      Handler: app.processPayment","      Runtime: nodejs14.x","","  SendOrderToRestaurantFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/sendordertorestaurant/","      Handler: app.sendOrderToRestaurant","      Runtime: nodejs14.x","","  ManageStateFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: src/order-management/functions/managestate/","      Handler: app.manageState","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","          SNS_TOPIC_ARN: !Ref OrderTopic","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:GetItem","              - dynamodb:Query","              - dynamodb:Scan","              - dynamodb:PutItem","              - dynamodb:UpdateItem","            Resource:","              - !Sub","                - \"arn:aws:dynamodb:*:*:table/${Table}\"","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\"","","  OrderTopic:","    Type: AWS::SNS::Topic","    Properties:","      Subscription:","        - Endpoint: \"test@gmail.com\"","          Protocol: \"email\"","      TopicName: \"order-topic\"","","  OrderManagementSFN:","    Type: AWS::Serverless::StateMachine","    Properties:","      DefinitionUri: src/order-management/statemachine/process-order.asl.json","      DefinitionSubstitutions:","        ManageStateArn: !GetAtt ManageStateFunction.Arn","        ProcessPaymentArn: !GetAtt ProcessPaymentFumction.Arn","        SendOrderToRestaurantArn: !GetAtt SendOrderToRestaurantFunction.Arn","      Policies:","        - LambdaInvokePolicy:","            FunctionName: !Ref ManageStateFunction","        - LambdaInvokePolicy:","            FunctionName: !Ref ProcessPaymentFumction","        - LambdaInvokePolicy:","            FunctionName: !Ref SendOrderToRestaurantFunction","","  OrderCognitoPool:","    Type: AWS::Cognito::UserPool","    Properties:","      UserPoolName: orders-pool","      Policies:","        PasswordPolicy:","          MinimumLength: 8","      UsernameAttributes:","        - email","      Schema:","        - AttributeDataType: String","          Name: email","          Required: true","","  OrderCognitoPoolClient:","    Type: AWS::Cognito::UserPoolClient","    Properties:","      UserPoolId: !Ref OrderCognitoPool","      ClientName: order-pool-client","      ExplicitAuthFlows:","        - ALLOW_ADMIN_USER_PASSWORD_AUTH","        - ALLOW_REFRESH_TOKEN_AUTH","      GenerateSecret: true","      SupportedIdentityProviders:","        - COGNITO","Outputs:","  DynamoDBTableName:","    Description: \"DynamoDB Table Name\"","    Value: !Ref OrderTable","  GetOrders:","    Description: \"GetOrders Lambda Function ARN\"","    Value: !GetAtt GetOrders.Arn","  OrderApiEndpoint:","    Description: \"API Gateway endpoint URL for Dev stage for Order Get function\"","    Value: !Sub \"https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/orders/\"","  PostOrders:","    Description: \"PostOrders Lambda Function ARN\"","    Value: !GetAtt PostOrders.Arn","  GetSingleOrder:","    Description: \"GetSingleOrder Lambda Function ARN\"","    Value: !GetAtt GetSingleOrder.Arn","  UpdateOrder:","    Description: \"UpdateOrder Lambda Function ARN\"","    Value: !GetAtt UpdateOrder.Arn","  DeleteOrder:","    Description: \"DeleteOrder Lambda Function ARN\"","    Value: !GetAtt DeleteOrder.Arn","  OrderQueueUrl:","    Description: \"URL of order queue\"","    Value: !Ref OrderQueue","  OrderDLQueueUrl:","    Description: \"URL of order dead-letter queue\"","    Value: !Ref OrderDLQueue","  CognitoClientID:","    Description: \"The client ID of the Cognito user pool\"","    Value: !Ref OrderCognitoPoolClient","  CognitoUserPoolID:","    Description: \"ID of the Cognito userpool\"","    Value: !Ref OrderCognitoPool",""]}],[{"start":{"row":343,"column":32},"end":{"row":344,"column":0},"action":"insert","lines":["",""],"id":171},{"start":{"row":344,"column":0},"end":{"row":344,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":344,"column":0},"end":{"row":344,"column":4},"action":"remove","lines":["    "],"id":172},{"start":{"row":344,"column":0},"end":{"row":346,"column":37},"action":"insert","lines":["  PostOrdersSync:","    Description: \"PostOrdersSync Lambda Function ARN\"","    Value: !GetAtt PostOrdersSync.Arn"]}],[{"start":{"row":309,"column":17},"end":{"row":310,"column":0},"action":"insert","lines":["",""],"id":173},{"start":{"row":310,"column":0},"end":{"row":310,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":310,"column":0},"end":{"row":310,"column":8},"action":"remove","lines":["        "],"id":174},{"start":{"row":310,"column":0},"end":{"row":332,"column":19},"action":"insert","lines":["  PostOrdersSync:","    Type: AWS::Serverless::Function ","    Properties:","      CodeUri: src/order-api/functions/post-orders-sync/","      Handler: app.postOrders","      Runtime: nodejs14.x","      Environment:","        Variables:","          ORDER_TABLE: !Ref OrderTable","      Policies:","        Statement:","          - Effect: Allow","            Action:","              - dynamodb:PutItem","            Resource:","              - !Sub ","                - 'arn:aws:dynamodb:*:*:table/${Table}'","                - { Table: !Ref OrderTable }","          - Effect: Allow","            Action:","              - logs:*","            Resource:","              - \"*\""]}],[{"start":{"row":309,"column":17},"end":{"row":310,"column":0},"action":"insert","lines":["",""],"id":175},{"start":{"row":310,"column":0},"end":{"row":310,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":310,"column":0},"end":{"row":310,"column":8},"action":"remove","lines":["        "],"id":176}],[{"start":{"row":211,"column":36},"end":{"row":212,"column":0},"action":"insert","lines":["",""],"id":177},{"start":{"row":212,"column":0},"end":{"row":212,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":212,"column":12},"end":{"row":212,"column":36},"action":"insert","lines":["- !GetAtt OrderQueue.Arn"],"id":178}],[{"start":{"row":212,"column":31},"end":{"row":212,"column":32},"action":"remove","lines":["e"],"id":179},{"start":{"row":212,"column":30},"end":{"row":212,"column":31},"action":"remove","lines":["u"]},{"start":{"row":212,"column":29},"end":{"row":212,"column":30},"action":"remove","lines":["e"]},{"start":{"row":212,"column":28},"end":{"row":212,"column":29},"action":"remove","lines":["u"]},{"start":{"row":212,"column":27},"end":{"row":212,"column":28},"action":"remove","lines":["Q"]},{"start":{"row":212,"column":26},"end":{"row":212,"column":27},"action":"remove","lines":["r"]},{"start":{"row":212,"column":25},"end":{"row":212,"column":26},"action":"remove","lines":["e"]},{"start":{"row":212,"column":24},"end":{"row":212,"column":25},"action":"remove","lines":["d"]},{"start":{"row":212,"column":23},"end":{"row":212,"column":24},"action":"remove","lines":["r"]},{"start":{"row":212,"column":22},"end":{"row":212,"column":23},"action":"remove","lines":["O"]}],[{"start":{"row":212,"column":22},"end":{"row":212,"column":23},"action":"insert","lines":["P"],"id":180},{"start":{"row":212,"column":23},"end":{"row":212,"column":24},"action":"insert","lines":["o"]},{"start":{"row":212,"column":24},"end":{"row":212,"column":25},"action":"insert","lines":["s"]},{"start":{"row":212,"column":25},"end":{"row":212,"column":26},"action":"insert","lines":["t"]}],[{"start":{"row":212,"column":22},"end":{"row":212,"column":26},"action":"remove","lines":["Post"],"id":181},{"start":{"row":212,"column":22},"end":{"row":212,"column":36},"action":"insert","lines":["PostOrdersSync"]}],[{"start":{"row":334,"column":19},"end":{"row":335,"column":0},"action":"insert","lines":["",""],"id":182},{"start":{"row":335,"column":0},"end":{"row":335,"column":14},"action":"insert","lines":["              "]}],[{"start":{"row":335,"column":0},"end":{"row":335,"column":14},"action":"remove","lines":["              "],"id":183},{"start":{"row":335,"column":0},"end":{"row":350,"column":0},"action":"insert","lines":["OrderCognitoDomain:","  Type: AWS::Cognito::UserPoolDomain","  Properties:","    Domain: !Sub \"order-app-${AWS::AccountId}\"","    UserPoolId: !Ref OrderCognitoPool","","OrderCognitoResourceServer:","  Type: AWS::Cognito::UserPoolResourceServer","  Properties:","    Identifier: \"order-api\"","    Name: \"order-api\"","    Scopes:","      - ScopeName: \"delete_order\"","        ScopeDescription: \"Delete Orders\"","    UserPoolId: !Ref OrderCognitoPool",""]}],[{"start":{"row":335,"column":0},"end":{"row":335,"column":2},"action":"insert","lines":["  "],"id":184},{"start":{"row":336,"column":0},"end":{"row":336,"column":2},"action":"insert","lines":["  "]},{"start":{"row":337,"column":0},"end":{"row":337,"column":2},"action":"insert","lines":["  "]},{"start":{"row":338,"column":0},"end":{"row":338,"column":2},"action":"insert","lines":["  "]},{"start":{"row":339,"column":0},"end":{"row":339,"column":2},"action":"insert","lines":["  "]},{"start":{"row":340,"column":0},"end":{"row":340,"column":2},"action":"insert","lines":["  "]},{"start":{"row":341,"column":0},"end":{"row":341,"column":2},"action":"insert","lines":["  "]},{"start":{"row":342,"column":0},"end":{"row":342,"column":2},"action":"insert","lines":["  "]},{"start":{"row":343,"column":0},"end":{"row":343,"column":2},"action":"insert","lines":["  "]},{"start":{"row":344,"column":0},"end":{"row":344,"column":2},"action":"insert","lines":["  "]},{"start":{"row":345,"column":0},"end":{"row":345,"column":2},"action":"insert","lines":["  "]},{"start":{"row":346,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["  "]},{"start":{"row":347,"column":0},"end":{"row":347,"column":2},"action":"insert","lines":["  "]},{"start":{"row":348,"column":0},"end":{"row":348,"column":2},"action":"insert","lines":["  "]},{"start":{"row":349,"column":0},"end":{"row":349,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":387,"column":37},"end":{"row":388,"column":0},"action":"insert","lines":["",""],"id":185},{"start":{"row":388,"column":0},"end":{"row":388,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":388,"column":0},"end":{"row":388,"column":2},"action":"remove","lines":["  "],"id":186}],[{"start":{"row":388,"column":2},"end":{"row":394,"column":0},"action":"insert","lines":["CognitoDomain:","  Description: \"ID of the Cognito Domain\"","  Value: !Ref OrderCognitoDomain","CognitoResourceServer:","  Description: \"Cognito Resource Server\"","  Value: !Ref OrderCognitoResourceServer",""],"id":187}],[{"start":{"row":391,"column":0},"end":{"row":391,"column":2},"action":"insert","lines":["  "],"id":188},{"start":{"row":392,"column":0},"end":{"row":392,"column":2},"action":"insert","lines":["  "]},{"start":{"row":393,"column":0},"end":{"row":393,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":389,"column":0},"end":{"row":389,"column":2},"action":"insert","lines":["  "],"id":189},{"start":{"row":390,"column":0},"end":{"row":390,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":310,"column":17},"end":{"row":311,"column":0},"action":"insert","lines":["",""],"id":192},{"start":{"row":311,"column":0},"end":{"row":311,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":311,"column":0},"end":{"row":311,"column":8},"action":"remove","lines":["        "],"id":193},{"start":{"row":311,"column":0},"end":{"row":321,"column":0},"action":"insert","lines":["      AllowedOAuthFlows:","        - code","      AllowedOAuthFlowsUserPoolClient: true","      AllowedOAuthScopes:","        - openid","        - profile","        - \"order-api/delete_order\"","      CallbackURLs:","        - \"https://localhost/callback\"","    DependsOn: OrderCognitoResourceServer",""]}],[{"start":{"row":320,"column":4},"end":{"row":320,"column":6},"action":"insert","lines":["  "],"id":194}],[{"start":{"row":320,"column":0},"end":{"row":320,"column":2},"action":"remove","lines":["  "],"id":196}],[{"start":{"row":300,"column":0},"end":{"row":320,"column":41},"action":"remove","lines":["  OrderCognitoPoolClient:","    Type: AWS::Cognito::UserPoolClient","    Properties:","      UserPoolId: !Ref OrderCognitoPool","      ClientName: order-pool-client","      ExplicitAuthFlows:","        - ALLOW_ADMIN_USER_PASSWORD_AUTH","        - ALLOW_REFRESH_TOKEN_AUTH","      GenerateSecret: true","      SupportedIdentityProviders:","        - COGNITO","      AllowedOAuthFlows:","        - code","      AllowedOAuthFlowsUserPoolClient: true","      AllowedOAuthScopes:","        - openid","        - profile","        - \"order-api/delete_order\"","      CallbackURLs:","        - \"https://localhost/callback\"","    DependsOn: OrderCognitoResourceServer"],"id":197},{"start":{"row":300,"column":0},"end":{"row":320,"column":41},"action":"insert","lines":["  OrderCognitoPoolClient:","    Type: AWS::Cognito::UserPoolClient","    Properties:","      UserPoolId: !Ref OrderCognitoPool","      ClientName: order-pool-client","      ExplicitAuthFlows:","        - ALLOW_ADMIN_USER_PASSWORD_AUTH","        - ALLOW_REFRESH_TOKEN_AUTH","      GenerateSecret: true","      SupportedIdentityProviders:","        - COGNITO","      AllowedOAuthFlows:","        - code","      AllowedOAuthFlowsUserPoolClient: true","      AllowedOAuthScopes:","        - openid","        - profile","        - \"order-api/delete_order\"","      CallbackURLs:","        - \"https://localhost/callback\"","    DependsOn: OrderCognitoResourceServer"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":10},"end":{"row":2,"column":10},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":87,"mode":"ace/mode/yaml"}},"timestamp":1687641192784,"hash":"a85407e76e12ea98fae6cd6f093b188d351c4afc"}